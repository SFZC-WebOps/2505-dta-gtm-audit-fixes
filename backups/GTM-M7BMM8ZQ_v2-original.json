{
    "exportFormatVersion": 2,
    "exportTime": "2025-05-17 23:15:17",
    "containerVersion": {
        "path": "accounts/2568135939/containers/191906845/versions/2",
        "accountId": "2568135939",
        "containerId": "191906845",
        "containerVersionId": "2",
        "container": {
            "path": "accounts/2568135939/containers/191906845",
            "accountId": "2568135939",
            "containerId": "191906845",
            "name": "Server Container SFZC",
            "publicId": "GTM-M7BMM8ZQ",
            "usageContext": [
                "SERVER"
            ],
            "fingerprint": "1722021399615",
            "tagManagerUrl": "https://tagmanager.google.com/#/container/accounts/2568135939/containers/191906845/workspaces?apiLink=container",
            "features": {
                "supportUserPermissions": true,
                "supportEnvironments": true,
                "supportWorkspaces": true,
                "supportGtagConfigs": false,
                "supportBuiltInVariables": true,
                "supportClients": true,
                "supportFolders": true,
                "supportTags": true,
                "supportTemplates": true,
                "supportTriggers": true,
                "supportVariables": true,
                "supportVersions": true,
                "supportZones": true,
                "supportTransformations": true
            },
            "tagIds": [
                "GTM-M7BMM8ZQ"
            ]
        },
        "tag": [
            {
                "accountId": "2568135939",
                "containerId": "191906845",
                "tagId": "5",
                "name": "FB_CONVERSIONS_API-1062378757459509-Server-Tag",
                "type": "cvt_191906845_3",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "pixelId",
                        "value": "1062378757459509"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "apiAccessToken",
                        "value": "EAA1qfFRBlMoBO5n5sIBhvuqZBnJ7d5jrZBV48fRhdosI5bV3yL90ZBYAVfIPdxCYZATWYBcDVsNoZAnAa5Ib3tZBX4szfmZCLRVRt4HPyYiPKDHLIrx3SvhFWqFN0uT3ES7nORWP5lLagk02d8pSexXFiZBHbWf08OOgJujqWiRowm9jL26Dm55qgUpGzFnqdk8PRgZDZD"
                    }
                ],
                "fingerprint": "1722022686671",
                "firingTriggerId": [
                    "4"
                ],
                "tagFiringOption": "ONCE_PER_EVENT",
                "monitoringMetadata": {
                    "type": "MAP"
                },
                "consentSettings": {
                    "consentStatus": "NOT_SET"
                }
            }
        ],
        "trigger": [
            {
                "accountId": "2568135939",
                "containerId": "191906845",
                "triggerId": "4",
                "name": "FB_CONVERSIONS_API-1062378757459509-Server-Trigger",
                "type": "ALWAYS",
                "filter": [
                    {
                        "type": "MATCH_REGEX",
                        "parameter": [
                            {
                                "type": "TEMPLATE",
                                "key": "arg0",
                                "value": "{{Event Name}}"
                            },
                            {
                                "type": "TEMPLATE",
                                "key": "arg1",
                                "value": ".+"
                            }
                        ]
                    }
                ],
                "fingerprint": "1722022682672"
            }
        ],
        "builtInVariable": [
            {
                "accountId": "2568135939",
                "containerId": "191906845",
                "type": "EVENT_NAME",
                "name": "Event Name"
            }
        ],
        "fingerprint": "1722022696132",
        "tagManagerUrl": "https://tagmanager.google.com/#/versions/accounts/2568135939/containers/191906845/versions/2?apiLink=version",
        "customTemplate": [
            {
                "accountId": "2568135939",
                "containerId": "191906845",
                "templateId": "3",
                "name": "Conversions API Tag",
                "fingerprint": "1722022679575",
                "templateData": "___TERMS_OF_SERVICE___\n\nBy creating or modifying this file you agree to Google Tag Manager's Community\nTemplate Gallery Developer Terms of Service available at\nhttps://developers.google.com/tag-manager/gallery-tos (or such other URL as\nGoogle may provide), as modified from time to time.\n\n\n___INFO___\n\n{\n  \"type\": \"TAG\",\n  \"id\": \"cvt_temp_public_id\",\n  \"version\": 1,\n  \"securityGroups\": [],\n  \"displayName\": \"Conversions API Tag\",\n  \"brand\": {\n    \"id\": \"github.com_facebookincubator\",\n    \"displayName\": \"facebookincubator\"\n  },\n  \"description\": \"A server-side tag template that prepares information from your tagging server to be sent through Conversions API.\",\n  \"containerContexts\": [\n    \"SERVER\"\n  ]\n}\n\n\n___TEMPLATE_PARAMETERS___\n\n[\n  {\n    \"type\": \"TEXT\",\n    \"name\": \"pixelId\",\n    \"displayName\": \"Pixel ID\",\n    \"simpleValueType\": true,\n    \"valueValidators\": [\n      {\n        \"type\": \"NON_EMPTY\"\n      }\n    ]\n  },\n  {\n    \"type\": \"TEXT\",\n    \"name\": \"apiAccessToken\",\n    \"displayName\": \"API Access Token\",\n    \"simpleValueType\": true,\n    \"valueValidators\": [\n      {\n        \"type\": \"NON_EMPTY\"\n      }\n    ],\n    \"help\": \"To use the Conversions API, you need an access token. See \\u003ca href\\u003d\\\"https://developers.facebook.com/docs/marketing-api/conversions-api/get-started#access-token\\\"\\u003ehere\\u003c/a\\u003e for generating an access token.\"\n  },\n  {\n    \"type\": \"TEXT\",\n    \"name\": \"testEventCode\",\n    \"displayName\": \"Test Event Code\",\n    \"simpleValueType\": true,\n    \"help\": \"Code used to verify that your server events are received correctly by Conversions API. Use this code to test your server events in the Test Events feature in Events Manager. See \\u003ca href\\u003d\\\"https://developers.facebook.com/docs/marketing-api/conversions-api/using-the-api#testEvents\\\"\\u003e Test Events Tool\\u003c/a\\u003e for an example.\"\n  },\n  {\n    \"type\": \"SELECT\",\n    \"name\": \"actionSource\",\n    \"displayName\": \"Action Source\",\n    \"macrosInSelect\": false,\n    \"selectItems\": [\n      {\n        \"value\": \"website\",\n        \"displayValue\": \"Website\"\n      },\n      {\n        \"value\": \"email\",\n        \"displayValue\": \"Email\"\n      },\n      {\n        \"value\": \"app\",\n        \"displayValue\": \"App\"\n      },\n      {\n        \"value\": \"phone_call\",\n        \"displayValue\": \"Phone Call\"\n      },\n      {\n        \"value\": \"chat\",\n        \"displayValue\": \"Chat\"\n      },\n      {\n        \"value\": \"physical_store\",\n        \"displayValue\": \"Physical Store\"\n      },\n      {\n        \"value\": \"system_generated\",\n        \"displayValue\": \"System Generated\"\n      },\n      {\n        \"value\": \"other\",\n        \"displayValue\": \"Other\"\n      }\n    ],\n    \"simpleValueType\": true,\n    \"help\": \"This field allows you to specify where your conversions occurred. Knowing where your events took place helps ensure your ads go to the right people. See \\u003ca href\\u003d\\\"https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/server-event#action-source\\\"\\u003ehere\\u003c/a\\u003e for more information.\"\n  },\n  {\n    \"type\": \"CHECKBOX\",\n    \"name\": \"extendCookies\",\n    \"checkboxText\": \"Extend Meta Pixel cookies (fbp/fbc)\",\n    \"simpleValueType\": true\n  }\n]\n\n\n___SANDBOXED_JS_FOR_SERVER___\n\n// Sandbox Javascript imports\nconst getAllEventData = require('getAllEventData');\nconst getType = require('getType');\nconst sendHttpRequest = require('sendHttpRequest');\nconst JSON = require('JSON');\nconst Math = require('Math');\nconst getTimestampMillis = require('getTimestampMillis');\nconst sha256Sync = require('sha256Sync');\nconst getCookieValues = require('getCookieValues');\nconst setCookie = require('setCookie');\nconst decodeUriComponent = require('decodeUriComponent');\nconst parseUrl = require('parseUrl');\nconst computeEffectiveTldPlusOne = require('computeEffectiveTldPlusOne');\n\n// Constants\nconst API_ENDPOINT = 'https://graph.facebook.com';\nconst API_VERSION = 'v14.0';\nconst PARTNER_AGENT = 'gtmss-1.0.0-0.0.6';\nconst GTM_EVENT_MAPPINGS = {\n  \"add_payment_info\": \"AddPaymentInfo\",\n  \"add_to_cart\": \"AddToCart\",\n  \"add_to_wishlist\": \"AddToWishlist\",\n  \"gtm.dom\": \"PageView\",\n  \"page_view\": \"PageView\",\n  \"purchase\": \"Purchase\",\n  \"search\": \"Search\",\n  \"begin_checkout\": \"InitiateCheckout\",\n  \"generate_lead\": \"Lead\",\n  \"view_item\": \"ViewContent\",\n  \"sign_up\": \"CompleteRegistration\"\n};\n\nfunction isAlreadyHashed(input){\n  return input && (input.match('^[A-Fa-f0-9]{64}$') != null);\n}\n\nfunction setFbCookie(name, value, expire) {\n  setCookie(name, value, {\n    domain: 'auto',\n    path: '/',\n    samesite: 'Lax',\n    secure: true,\n    'max-age': expire || 7776000, // default to 90 days\n    httpOnly: false\n  });\n}\n\nfunction getFbcValue() {\n  let fbc = eventModel['x-fb-ck-fbc'] || getCookieValues('_fbc', true)[0];\n  const url = eventModel.page_location;\n  const subDomainIndex = url ? computeEffectiveTldPlusOne(url).split('.').length - 1 : 1;\n  const parsedUrl = parseUrl(url);\n\n  if (parsedUrl && parsedUrl.searchParams.fbclid) {\n    fbc = 'fb.' + subDomainIndex + '.' + getTimestampMillis() + '.' + decodeUriComponent(parsedUrl.searchParams.fbclid);\n  }\n\n  return fbc;\n}\n\nfunction hashFunction(input){\n  const type = getType(input);\n\n  if(type == 'undefined' || input == 'undefined') {\n    return undefined;\n  }\n\n  if(input == null || isAlreadyHashed(input)){\n    return input;\n  }\n\n  return sha256Sync(input.trim().toLowerCase(), {outputEncoding: 'hex'});\n}\n\nfunction getContentFromItems(items) {\n    return items.map(item => {\n        return {\n            \"id\": item.item_id,\n            \"title\": item.item_name,\n            \"item_price\": item.price,\n            \"brand\": item.item_brand,\n            \"quantity\": item.quantity,\n            \"category\": item.item_category,\n        };\n    });\n}\n\nfunction getFacebookEventName(gtmEventName) {\n  return GTM_EVENT_MAPPINGS[gtmEventName] || gtmEventName;\n}\n\nconst eventModel = getAllEventData();\nconst event = {};\nevent.event_name = getFacebookEventName(eventModel.event_name);\nevent.event_time = eventModel.event_time || (Math.round(getTimestampMillis() / 1000));\nevent.event_id = eventModel.event_id;\nevent.event_source_url = eventModel.page_location;\nif(eventModel.action_source || data.actionSource) {\n  event.action_source = eventModel.action_source ? eventModel.action_source : data.actionSource;\n}\n\nevent.user_data = {};\n// Default Tag Parameters\nevent.user_data.client_ip_address = eventModel.ip_override;\nevent.user_data.client_user_agent = eventModel.user_agent;\n\n\n// Commmon Event Schema Parameters\nevent.user_data.em = eventModel['x-fb-ud-em'] ||\n                        (eventModel.user_data != null ? hashFunction(eventModel.user_data.email_address) : null);\nevent.user_data.ph = eventModel['x-fb-ud-ph'] ||\n                        (eventModel.user_data != null ? hashFunction(eventModel.user_data.phone_number) : null);\n\nconst addressData = (eventModel.user_data != null && eventModel.user_data.address != null) ? eventModel.user_data.address : {};\nevent.user_data.fn = eventModel['x-fb-ud-fn'] || hashFunction(addressData.first_name);\nevent.user_data.ln = eventModel['x-fb-ud-ln'] || hashFunction(addressData.last_name);\nevent.user_data.ct = eventModel['x-fb-ud-ct'] || hashFunction(addressData.city);\nevent.user_data.st = eventModel['x-fb-ud-st'] || hashFunction(addressData.region);\nevent.user_data.zp = eventModel['x-fb-ud-zp'] || hashFunction(addressData.postal_code);\nevent.user_data.country = eventModel['x-fb-ud-country'] || hashFunction(addressData.country);\n\n// Conversions API Specific Parameters\nevent.user_data.ge = eventModel['x-fb-ud-ge'];\nevent.user_data.db = eventModel['x-fb-ud-db'];\nevent.user_data.external_id = eventModel['x-fb-ud-external_id'];\nevent.user_data.subscription_id = eventModel['x-fb-ud-subscription_id'];\nevent.user_data.fbp = eventModel['x-fb-ck-fbp'] || getCookieValues('_fbp', true)[0];\nevent.user_data.fbc = getFbcValue();\n\nevent.custom_data = {};\nevent.custom_data.currency = eventModel.currency;\nevent.custom_data.value = eventModel.value;\nevent.custom_data.search_string = eventModel.search_term;\nevent.custom_data.order_id = eventModel.transaction_id;\nevent.custom_data.content_category = eventModel['x-fb-cd-content_category'];\nevent.custom_data.content_ids = eventModel['x-fb-cd-content_ids'];\nevent.custom_data.content_name = eventModel['x-fb-cd-content_name'];\nevent.custom_data.content_type = eventModel['x-fb-cd-content_type'];\nevent.custom_data.contents = eventModel['x-fb-cd-contents'] ||\n                                  (eventModel.items != null ? getContentFromItems(eventModel.items) : null);\nevent.custom_data.num_items = eventModel['x-fb-cd-num_items'];\nevent.custom_data.predicted_ltv = eventModel['x-fb-cd-predicted_ltv'];\nevent.custom_data.status = eventModel['x-fb-cd-status'];\nevent.custom_data.delivery_category = eventModel['x-fb-cd-delivery_category'];\n\nconst eventRequest = {data: [event], partner_agent: PARTNER_AGENT};\n\nif(eventModel.test_event_code || data.testEventCode) {\n  eventRequest.test_event_code = eventModel.test_event_code ? eventModel.test_event_code : data.testEventCode;\n}\n\n// Posting to Conversions API\nconst routeParams = 'events?access_token=' + data.apiAccessToken;\nconst graphEndpoint = [API_ENDPOINT,\n                       API_VERSION,\n                       data.pixelId,\n                       routeParams].join('/');\n\nconst requestHeaders = {headers: {'content-type': 'application/json'}, method: 'POST'};\nsendHttpRequest(\n  graphEndpoint,\n  (statusCode, headers, response) => {\n    if (statusCode >= 200 && statusCode < 300) {\n      if (data.extendCookies && event.user_data.fbc) {\n        setFbCookie('_fbc', event.user_data.fbc);\n      }\n\n      if (data.extendCookies && event.user_data.fbp) {\n        setFbCookie('_fbp', event.user_data.fbp);\n      }\n\n      data.gtmOnSuccess();\n    } else {\n      data.gtmOnFailure();\n    }\n  },\n  requestHeaders,\n  JSON.stringify(eventRequest)\n);\n\n\n___SERVER_PERMISSIONS___\n\n[\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"read_event_data\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"eventDataAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"any\"\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"send_http\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"allowedUrls\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"specific\"\n          }\n        },\n        {\n          \"key\": \"urls\",\n          \"value\": {\n            \"type\": 2,\n            \"listItem\": [\n              {\n                \"type\": 1,\n                \"string\": \"https://graph.facebook.com/\"\n              }\n            ]\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"get_cookies\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"cookieAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"specific\"\n          }\n        },\n        {\n          \"key\": \"cookieNames\",\n          \"value\": {\n            \"type\": 2,\n            \"listItem\": [\n              {\n                \"type\": 1,\n                \"string\": \"_fbp\"\n              },\n              {\n                \"type\": 1,\n                \"string\": \"_fbc\"\n              }\n            ]\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"set_cookies\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"allowedCookies\",\n          \"value\": {\n            \"type\": 2,\n            \"listItem\": [\n              {\n                \"type\": 3,\n                \"mapKey\": [\n                  {\n                    \"type\": 1,\n                    \"string\": \"name\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"domain\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"path\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"secure\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"session\"\n                  }\n                ],\n                \"mapValue\": [\n                  {\n                    \"type\": 1,\n                    \"string\": \"_fbc\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"*\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"*\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"any\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"any\"\n                  }\n                ]\n              },\n              {\n                \"type\": 3,\n                \"mapKey\": [\n                  {\n                    \"type\": 1,\n                    \"string\": \"name\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"domain\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"path\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"secure\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"session\"\n                  }\n                ],\n                \"mapValue\": [\n                  {\n                    \"type\": 1,\n                    \"string\": \"_fbp\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"*\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"*\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"any\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"any\"\n                  }\n                ]\n              }\n            ]\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  }\n]\n\n\n___TESTS___\n\nscenarios:\n- name: on EventModel model data tag triggers to send to Conversions API\n  code: |-\n    // Act\n    runCode(testConfigurationData);\n\n    //Assert\n    assertApi('sendHttpRequest').wasCalledWith(requestEndpoint, actualSuccessCallback, requestHeaderOptions, JSON.stringify(requestData));\n    assertApi('gtmOnSuccess').wasCalled();\n- name: on Event with common event schema triggers tag to send to Conversions API\n  code: |-\n    const preTagFireEventTime = Math.round(getTimestampMillis() / 1000);\n    const common_event_schema = {\n        event_name: testData.event_name,\n        client_id: 'client123',\n        ip_override: testData.ip_address,\n        user_agent: testData.user_agent,\n      };\n    mock('getAllEventData', () => {\n      return common_event_schema;\n    });\n\n    // Act\n    runCode(testConfigurationData);\n\n    //Assert\n    const actualTagFireEventTime = JSON.parse(httpBody).data[0].event_time;\n    assertThat(actualTagFireEventTime-preTagFireEventTime).isLessThan(1);\n    assertApi('gtmOnSuccess').wasCalled();\n- name: on sending action source from Client, Tag overrides the preset configuration\n  code: |-\n    // Act\n    mock('getAllEventData', () => {\n      inputEventModel.action_source = testData.action_source;\n      return inputEventModel;\n    });\n    runCode(testConfigurationData);\n\n    //Assert\n    assertThat(JSON.parse(httpBody).data[0].action_source).isEqualTo(inputEventModel.action_source);\n- name: on receiving event, if GTM Standard Event then Tag converts to corresponding\n    Conversions API Event, passes through as-is if otherwise\n  code: |-\n    // Act\n    mock('getAllEventData', () => {\n      inputEventModel.event_name = 'add_to_wishlist';\n      return inputEventModel;\n    });\n    runCode(testConfigurationData);\n\n    //Assert\n    assertThat(JSON.parse(httpBody).data[0].event_name).isEqualTo('AddToWishlist');\n\n\n    // Act\n    mock('getAllEventData', () => {\n      inputEventModel.event_name = 'custom_event';\n      return inputEventModel;\n    });\n    runCode(testConfigurationData);\n\n    //Assert\n    assertThat(JSON.parse(httpBody).data[0].event_name).isEqualTo('custom_event');\n\n    // Act\n    mock('getAllEventData', () => {\n      inputEventModel.event_name = 'generate_lead';\n      return inputEventModel;\n    });\n    runCode(testConfigurationData);\n\n    //Assert\n    assertThat(JSON.parse(httpBody).data[0].event_name).isEqualTo('Lead');\n- name: On receiving event, hashes the the user_data fields if they are not already\n    hashed\n  code: |-\n    // Un-hashed raw email_address from Common Event Schema is hashed before posted to Conversions API.\n\n    // Act\n    mock('getAllEventData', () => {\n      inputEventModel['x-fb-ud-em'] = null;\n      inputEventModel['x-fb-ud-ph'] = null;\n      inputEventModel['x-fb-ud-fn'] = null;\n      inputEventModel['x-fb-ud-ln'] = null;\n      inputEventModel['x-fb-ud-ct'] = null;\n      inputEventModel['x-fb-ud-st'] = null;\n      inputEventModel['x-fb-ud-zp'] = null;\n      inputEventModel['x-fb-ud-country'] = null;\n      inputEventModel.user_data = {};\n      inputEventModel.user_data.email_address = 'foo@bar.com';\n      inputEventModel.user_data.phone_number = '1234567890';\n      inputEventModel.user_data.address = {};\n      inputEventModel.user_data.address.first_name = 'Foo';\n      inputEventModel.user_data.address.last_name = 'Bar';\n      inputEventModel.user_data.address.city = 'Menlo Park';\n      inputEventModel.user_data.address.region = 'ca';\n      inputEventModel.user_data.address.postal_code = '12345';\n      inputEventModel.user_data.address.country = 'usa';\n      return inputEventModel;\n    });\n    runCode(testConfigurationData);\n\n    //Assert\n    assertThat(JSON.parse(httpBody).data[0].user_data.em).isEqualTo(hashFunction('foo@bar.com'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.ph).isEqualTo(hashFunction('1234567890'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.fn).isEqualTo(hashFunction('Foo'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.ln).isEqualTo(hashFunction('Bar'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.ct).isEqualTo(hashFunction('Menlo Park'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.st).isEqualTo(hashFunction('ca'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.zp).isEqualTo(hashFunction('12345'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.country).isEqualTo(hashFunction('usa'));\n\n    // Un-hashed raw email_address in mixed-case is converted to lowercase, hashed and posted to Conversions API.\n\n    // Act\n    mock('getAllEventData', () => {\n      inputEventModel.user_data.email_address = 'FOO@BAR.com';\n      return inputEventModel;\n    });\n    runCode(testConfigurationData);\n\n    //Assert\n    assertThat(JSON.parse(httpBody).data[0].user_data.em).isEqualTo(hashFunction('foo@bar.com'));\n\n\n    // Already sha256(email_address) field from GA4 schema, is unchanged, is posted as-is to Conversions API.\n\n    // Act\n    mock('getAllEventData', () => {\n      inputEventModel.user_data.email_address = hashFunction('foo@bar.com');\n      return inputEventModel;\n    });\n    runCode(testConfigurationData);\n\n    //Assert\n    assertThat(JSON.parse(httpBody).data[0].user_data.em).isEqualTo(hashFunction('foo@bar.com'));\n\n    // Already null email field from GA4 schema, is sent as null to Conversions API.\n\n    // Act\n    mock('getAllEventData', () => {\n      inputEventModel.user_data.email_address = null;\n      return inputEventModel;\n    });\n    runCode(testConfigurationData);\n\n    //Assert\n    assertThat(JSON.parse(httpBody).data[0].user_data.em).isEqualTo(null);\n- name: On receiving event with fbp/fbc cookies, it is sent to Conversions API\n  code: |-\n    // Act\n    mock('getAllEventData', () => {\n      inputEventModel['x-fb-ck-fbp'] = null;\n      inputEventModel['x-fb-ck-fbc'] = null;\n      return inputEventModel;\n    });\n\n    mock('getCookieValues', (cookieName) => {\n      if(cookieName === '_fbp') return ['fbp_cookie'];\n      if(cookieName === '_fbc') return ['fbc_cookie'];\n    });\n\n    runCode(testConfigurationData);\n\n    //Assert\n    assertThat(JSON.parse(httpBody).data[0].user_data.fbp).isEqualTo('fbp_cookie');\n    assertThat(JSON.parse(httpBody).data[0].user_data.fbc).isEqualTo('fbc_cookie');\n- name: On receiving GA4 event, with the items info, tag parses them into Conversions\n    API schema\n  code: |-\n    // Act\n    let items = [\n        {\n          item_id: '1',\n          item_name: 'item_1',\n          quantity: 5,\n          price: 123.45,\n          item_category: 'cat_1',\n          item_brand: 'brand_1',\n        },\n        {\n        item_id: '2',\n        item_name: 'item_2',\n        quantity: 10,\n        price: 123.45,\n        item_category: 'cat_2',\n        item_brand: 'brand_2',\n        }\n      ];\n    mock('getAllEventData', () => {\n      inputEventModel['x-fb-cd-contents'] = null;\n      inputEventModel.items = items;\n      return inputEventModel;\n    });\n    runCode(testConfigurationData);\n\n    //Assert\n    let actual_contents = JSON.parse(httpBody).data[0].custom_data.contents;\n    assertThat(JSON.parse(httpBody).data[0].custom_data.contents.length).isEqualTo(items.length);\n    for( var i = 0; i < items.length; i++) {\n      assertThat(actual_contents[i].id).isEqualTo(items[i].item_id);\n      assertThat(actual_contents[i].item_price).isEqualTo(items[i].price);\n      assertThat(actual_contents[i].brand).isEqualTo(items[i].item_brand);\n      assertThat(actual_contents[i].quantity).isEqualTo(items[i].quantity);\n      assertThat(actual_contents[i].category).isEqualTo(items[i].item_category);\n    }\n\n    // Act\n    mock('getAllEventData', () => {\n      inputEventModel.items = null;\n      return inputEventModel;\n    });\n    runCode(testConfigurationData);\n\n    //Assert\n    assertThat(JSON.parse(httpBody).data[0].custom_data.contents).isEqualTo(null);\n- name: When address is missing it skips parsing the nested fields\n  code: |\n    mock('getAllEventData', () => {\n      inputEventModel['x-fb-ud-em'] = null;\n      inputEventModel['x-fb-ud-ph'] = null;\n      inputEventModel['x-fb-ud-fn'] = null;\n      inputEventModel['x-fb-ud-ln'] = null;\n      inputEventModel['x-fb-ud-ct'] = null;\n      inputEventModel['x-fb-ud-st'] = null;\n      inputEventModel['x-fb-ud-zp'] = null;\n      inputEventModel['x-fb-ud-country'] = null;\n      inputEventModel.user_data = {};\n      inputEventModel.user_data.email_address = 'foo@bar.com';\n      inputEventModel.user_data.phone_number = '1234567890';\n      return inputEventModel;\n    });\n\n    runCode(testConfigurationData);\n\n    assertThat(JSON.parse(httpBody).data[0].user_data.em).isEqualTo(hashFunction('foo@bar.com'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.ph).isEqualTo(hashFunction('1234567890'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.fn).isUndefined();\n    assertThat(JSON.parse(httpBody).data[0].user_data.ln).isUndefined();\n    assertThat(JSON.parse(httpBody).data[0].user_data.ct).isUndefined();\n    assertThat(JSON.parse(httpBody).data[0].user_data.st).isUndefined();\n    assertThat(JSON.parse(httpBody).data[0].user_data.zp).isUndefined();\n    assertThat(JSON.parse(httpBody).data[0].user_data.country).isUndefined();\n- name: When parameters are undefined skip parsing\n  code: |\n    mock('getAllEventData', () => {\n      inputEventModel['x-fb-ud-em'] = null;\n      inputEventModel['x-fb-ud-ph'] = null;\n      inputEventModel['x-fb-ud-fn'] = null;\n      inputEventModel['x-fb-ud-ln'] = null;\n      inputEventModel['x-fb-ud-ct'] = null;\n      inputEventModel['x-fb-ud-st'] = null;\n      inputEventModel['x-fb-ud-zp'] = null;\n      inputEventModel['x-fb-ud-country'] = null;\n      inputEventModel.user_data = {};\n      inputEventModel.user_data.email_address = undefined;\n      inputEventModel.user_data.phone_number = '1234567890';\n      inputEventModel.user_data.address = {};\n      inputEventModel.user_data.address.first_name = 'John';\n      inputEventModel.user_data.address.last_name = undefined;\n      inputEventModel.user_data.address.city = 'menlopark';\n      inputEventModel.user_data.address.region = 'ca';\n      inputEventModel.user_data.address.postal_code = '94025';\n      inputEventModel.user_data.address.country = 'usa';\n      return inputEventModel;\n    });\n\n    runCode(testConfigurationData);\n\n    assertThat(JSON.parse(httpBody).data[0].user_data.em).isUndefined();\n    assertThat(JSON.parse(httpBody).data[0].user_data.ph).isEqualTo(hashFunction('1234567890'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.fn).isEqualTo(hashFunction('John'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.ln).isUndefined();\n    assertThat(JSON.parse(httpBody).data[0].user_data.ct).isEqualTo(hashFunction('menlopark'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.st).isEqualTo(hashFunction('ca'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.zp).isEqualTo(hashFunction('94025'));\n    assertThat(JSON.parse(httpBody).data[0].user_data.country).isEqualTo(hashFunction('usa'));\n- name: Set Meta cookies (fbp / fbc) if 'extendCookies' checkbox is ticked\n  code: |\n    runCode({\n      pixelId: '123',\n      apiAccessToken: 'abc',\n      testEventCode: 'test123',\n      actionSource: 'source123',\n      extendCookies: true\n    });\n\n    //Assert\n    assertApi('setCookie').wasCalled();\n    assertApi('gtmOnSuccess').wasCalled();\n- name: Do not set Meta cookies (fbp / fbc) if 'extendCookies' checkbox is ticked\n  code: |\n    runCode({\n      pixelId: '123',\n      apiAccessToken: 'abc',\n      testEventCode: 'test123',\n      actionSource: 'source123',\n      extendCookies: false\n    });\n\n    //Assert\n    assertApi('setCookie').wasNotCalled();\n    assertApi('gtmOnSuccess').wasCalled();\nsetup: |-\n  // Arrange\n  const JSON = require('JSON');\n  const Math = require('Math');\n  const getTimestampMillis = require('getTimestampMillis');\n  const sha256Sync = require('sha256Sync');\n\n  // helper methods\n  function hashFunction(input) {\n    return sha256Sync(input.trim().toLowerCase(), {outputEncoding: 'hex'});\n  }\n\n  const testConfigurationData = {\n    pixelId: '123',\n    apiAccessToken: 'abc',\n    testEventCode: 'test123',\n    actionSource: 'source123'\n  };\n\n  const testData = {\n    event_name: \"Test1\",\n    event_time: \"123456789\",\n    test_event_code: \"test123\",\n    action_source: 'website',\n    user_data: {\n      ip_address: '1.2.3.4',\n      user_agent: 'Test_UA',\n      email: 'test@example.com',\n      phone_number: '123456789',\n      first_name: 'foo',\n      last_name: 'bar',\n      gender: 'm',\n      date_of_brith: '19910526',\n      city: 'menlopark',\n      state: 'ca',\n      country: 'us',\n      zip: '12345',\n      external_id: 'user123',\n      subscription_id: 'abc123',\n      fbp: 'test_browser_id',\n      fbc: 'test_click_id',\n    },\n    custom_data: {\n      currency: 'USD',\n      value: '123',\n      search_string: 'query123',\n      transaction_id: 'order_123',\n      content_category: 'testCategory',\n      content_ids: ['123', '456'],\n      content_name: 'Foo',\n      content_type: 'product',\n      contents:  [{'id': '123', 'quantity': 2}, {'id': '456', 'quantity': 2}],\n      num_items: '4',\n      predicted_ltv: '10000',\n      delivery_category: 'home_delivery',\n      status: 'subscribed',\n    }\n  };\n\n  let inputEventModel = {\n    'event_name': testData.event_name,\n    'event_time': testData.event_time,\n    'ip_override': testData.user_data.ip_address,\n    'user_agent': testData.user_data.user_agent,\n    'test_event_code': testData.test_event_code,\n    'x-fb-ud-em': testData.user_data.email,\n    'x-fb-ud-ph': testData.user_data.phone_number,\n    'x-fb-ud-fn': testData.user_data.first_name,\n    'x-fb-ud-ln': testData.user_data.last_name,\n    'x-fb-ud-ge': testData.user_data.gender,\n    'x-fb-ud-db': testData.user_data.date_of_brith,\n    'x-fb-ud-ct': testData.user_data.city,\n    'x-fb-ud-st': testData.user_data.state,\n    'x-fb-ud-zp': testData.user_data.zip,\n    'x-fb-ud-country': testData.user_data.country,\n    'x-fb-ud-external_id': testData.user_data.external_id,\n    'x-fb-ud-subscription_id': testData.user_data.subscription_id,\n    'x-fb-ck-fbp': testData.user_data.fbp,\n    'x-fb-ck-fbc': testData.user_data.fbc,\n    'currency': testData.custom_data.currency,\n    'value': testData.custom_data.value,\n    'search_term': testData.custom_data.search_string,\n    'transaction_id': testData.custom_data.transaction_id,\n    'x-fb-cd-status': testData.custom_data.status,\n    'x-fb-cd-content_category': testData.custom_data.content_category,\n    'x-fb-cd-content_name': testData.custom_data.content_name,\n    'x-fb-cd-content_type': testData.custom_data.content_type,\n    'x-fb-cd-contents': testData.custom_data.contents,\n    'x-fb-cd-num_items': testData.custom_data.num_items,\n    'x-fb-cd-predicted_ltv': testData.custom_data.predicted_ltv,\n    'x-fb-cd-delivery_category': testData.custom_data.delivery_category,\n  };\n\n  const expectedEventData = {\n  'event_name': testData.event_name,\n  'event_time': testData.event_time,\n  'action_source': testConfigurationData.actionSource,\n  'user_data': {\n    'client_ip_address': testData.user_data.ip_address,\n    'client_user_agent': testData.user_data.user_agent,\n    'em': testData.user_data.email,\n    'ph': testData.user_data.phone_number,\n    'fn': testData.user_data.first_name,\n    'ln': testData.user_data.last_name,\n    'ct': testData.user_data.city,\n    'st': testData.user_data.state,\n    'zp': testData.user_data.zip,\n    'country': testData.user_data.country,\n    'ge': testData.user_data.gender,\n    'db': testData.user_data.date_of_brith,\n    'external_id': testData.user_data.external_id,\n    'subscription_id': testData.user_data.subscription_id,\n    'fbp': testData.user_data.fbp,\n    'fbc': testData.user_data.fbc,\n  },\n    'custom_data': {\n      'currency': testData.custom_data.currency,\n      'value': testData.custom_data.value,\n      'search_string': testData.custom_data.search_string,\n      'order_id': testData.custom_data.transaction_id,\n      'content_category': testData.custom_data.content_category,\n      'content_name': testData.custom_data.content_name,\n      'content_type': testData.custom_data.content_type,\n      'contents': testData.custom_data.contents,\n      'num_items': testData.custom_data.num_items,\n      'predicted_ltv': testData.custom_data.predicted_ltv,\n      'status': testData.custom_data.status,\n      'delivery_category': testData.custom_data.delivery_category,\n    }\n  };\n\n  mock('getAllEventData', () => {\n    return inputEventModel;\n  });\n\n  const apiEndpoint = 'https://graph.facebook.com';\n  const apiVersion = 'v14.0';\n  const partnerAgent = 'gtmss-1.0.0-0.0.6';\n\n  const routeParams = 'events?access_token=' + testConfigurationData.apiAccessToken;\n  const requestEndpoint = [apiEndpoint,\n                          apiVersion,\n                          testConfigurationData.pixelId,\n                          routeParams].join('/');\n\n  let requestData = {\n                      data: [expectedEventData],\n                      partner_agent: partnerAgent,\n                      test_event_code: testData.test_event_code\n                     };\n  const requestHeaderOptions = {headers: {'content-type': 'application/json'}, method: 'POST'};\n\n  let actualSuccessCallback, httpBody;\n  mock('sendHttpRequest', (postUrl, response, options, body) => {\n    actualSuccessCallback = response;\n    httpBody = body;\n    actualSuccessCallback(200, {}, '');\n  });\n\n\n___NOTES___\n\nCreated on 8/5/2020, 10:20:28 AM\n\n\n",
                "galleryReference": {
                    "host": "github.com",
                    "owner": "facebookincubator",
                    "repository": "ConversionsAPI-Tag-for-GoogleTagManager",
                    "version": "b0c8f9608085738725806125aa849b8b959ed70c",
                    "signature": "0d047cdfb2dcdd9ffaaff924e1c8cc13ebd6c699669b60749c9287a7bb6eb21e"
                }
            }
        ],
        "client": [
            {
                "accountId": "2568135939",
                "containerId": "191906845",
                "clientId": "1",
                "name": "GA4",
                "type": "gaaw_client",
                "parameter": [
                    {
                        "type": "BOOLEAN",
                        "key": "activateDefaultPaths",
                        "value": "true"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookieManagement",
                        "value": "server"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookieName",
                        "value": "FPID"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookieDomain",
                        "value": "auto"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookiePath",
                        "value": "/"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookieMaxAgeInSec",
                        "value": "63072000"
                    }
                ],
                "fingerprint": "1722021399616"
            }
        ]
    }
}